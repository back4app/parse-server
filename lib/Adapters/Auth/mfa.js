"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _otpauth = require("otpauth");
var _cryptoUtils = require("../../cryptoUtils");
var _AuthAdapter = _interopRequireDefault(require("./AuthAdapter"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Parse Server authentication adapter for Multi-Factor Authentication (MFA).
 *
 * @class MFAAdapter
 * @param {Object} options - The adapter options.
 * @param {Array<String>} options.options - Supported MFA methods. Must include `"SMS"` or `"TOTP"`.
 * @param {Number} [options.digits=6] - The number of digits for the one-time password (OTP). Must be between 4 and 10.
 * @param {Number} [options.period=30] - The validity period of the OTP in seconds. Must be greater than 10.
 * @param {String} [options.algorithm="SHA1"] - The algorithm used for TOTP generation. Defaults to `"SHA1"`.
 * @param {Function} [options.sendSMS] - A callback function for sending SMS OTPs. Required if `"SMS"` is included in `options`.
 *
 * @description
 * ## Parse Server Configuration
 * To configure Parse Server for MFA, use the following structure:
 * ```javascript
 * {
 *   auth: {
 *     mfa: {
 *       options: ["SMS", "TOTP"],
 *       digits: 6,
 *       period: 30,
 *       algorithm: "SHA1",
 *       sendSMS: (token, mobile) => {
 *         // Send the SMS using your preferred SMS provider.
 *         console.log(`Sending SMS to ${mobile} with token: ${token}`);
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * ## MFA Methods
 * - **SMS**:
 *   - Requires a valid mobile number.
 *   - Sends a one-time password (OTP) via SMS for login or verification.
 *   - Uses the `sendSMS` callback for sending the OTP.
 *
 * - **TOTP**:
 *   - Requires a secret key for setup.
 *   - Validates the user's OTP against a time-based one-time password (TOTP) generated using the secret key.
 *   - Supports configurable digits, period, and algorithm for TOTP generation.
 *
 * ## MFA Payload
 * The adapter requires the following `authData` fields:
 * - **For SMS-based MFA**:
 *   - `mobile`: The user's mobile number (required for setup).
 *   - `token`: The OTP provided by the user for login or verification.
 * - **For TOTP-based MFA**:
 *   - `secret`: The TOTP secret key for the user (required for setup).
 *   - `token`: The OTP provided by the user for login or verification.
 *
 * ## Example Payloads
 * ### SMS Setup Payload
 * ```json
 * {
 *   "mobile": "+1234567890"
 * }
 * ```
 *
 * ### TOTP Setup Payload
 * ```json
 * {
 *   "secret": "BASE32ENCODEDSECRET",
 *   "token": "123456"
 * }
 * ```
 *
 * ### Login Payload
 * ```json
 * {
 *   "token": "123456"
 * }
 * ```
 *
 * @see {@link https://en.wikipedia.org/wiki/Time-based_One-Time_Password_algorithm Time-based One-Time Password Algorithm (TOTP)}
 * @see {@link https://tools.ietf.org/html/rfc6238 RFC 6238: TOTP: Time-Based One-Time Password Algorithm}
 */

class MFAAdapter extends _AuthAdapter.default {
  validateOptions(opts) {
    const validOptions = opts.options;
    if (!Array.isArray(validOptions)) {
      throw 'mfa.options must be an array';
    }
    this.sms = validOptions.includes('SMS');
    this.totp = validOptions.includes('TOTP');
    if (!this.sms && !this.totp) {
      throw 'mfa.options must include SMS or TOTP';
    }
    const digits = opts.digits || 6;
    const period = opts.period || 30;
    if (typeof digits !== 'number') {
      throw 'mfa.digits must be a number';
    }
    if (typeof period !== 'number') {
      throw 'mfa.period must be a number';
    }
    if (digits < 4 || digits > 10) {
      throw 'mfa.digits must be between 4 and 10';
    }
    if (period < 10) {
      throw 'mfa.period must be greater than 10';
    }
    const sendSMS = opts.sendSMS;
    if (this.sms && typeof sendSMS !== 'function') {
      throw 'mfa.sendSMS callback must be defined when using SMS OTPs';
    }
    this.smsCallback = sendSMS;
    this.digits = digits;
    this.period = period;
    this.algorithm = opts.algorithm || 'SHA1';
  }
  validateSetUp(mfaData) {
    if (mfaData.mobile && this.sms) {
      return this.setupMobileOTP(mfaData.mobile);
    }
    if (this.totp) {
      return this.setupTOTP(mfaData);
    }
    throw 'Invalid MFA data';
  }
  async validateLogin(loginData, _, req) {
    const saveResponse = {
      doNotSave: true
    };
    const token = loginData.token;
    const auth = req.original.get('authData') || {};
    const {
      secret,
      recovery,
      mobile,
      token: saved,
      expiry
    } = auth.mfa || {};
    if (this.sms && mobile) {
      if (token === 'request') {
        const {
          token: sendToken,
          expiry
        } = await this.sendSMS(mobile);
        auth.mfa.token = sendToken;
        auth.mfa.expiry = expiry;
        req.object.set('authData', auth);
        await req.object.save(null, {
          useMasterKey: true
        });
        throw 'Please enter the token';
      }
      if (!saved || token !== saved) {
        throw 'Invalid MFA token 1';
      }
      if (new Date() > expiry) {
        throw 'Invalid MFA token 2';
      }
      delete auth.mfa.token;
      delete auth.mfa.expiry;
      return {
        save: auth.mfa
      };
    }
    if (this.totp) {
      if (typeof token !== 'string') {
        throw 'Invalid MFA token';
      }
      if (!secret) {
        return saveResponse;
      }
      if (recovery[0] === token || recovery[1] === token) {
        return saveResponse;
      }
      const totp = new _otpauth.TOTP({
        algorithm: this.algorithm,
        digits: this.digits,
        period: this.period,
        secret: _otpauth.Secret.fromBase32(secret)
      });
      const valid = totp.validate({
        token
      });
      if (valid === null) {
        throw 'Invalid MFA token';
      }
    }
    return saveResponse;
  }
  async validateUpdate(authData, _, req) {
    if (req.master) {
      return;
    }
    if (authData.mobile && this.sms) {
      var _req$original$get;
      if (!authData.token) {
        throw 'MFA is already set up on this account';
      }
      return this.confirmSMSOTP(authData, ((_req$original$get = req.original.get('authData')) === null || _req$original$get === void 0 ? void 0 : _req$original$get.mfa) || {});
    }
    if (this.totp) {
      await this.validateLogin({
        token: authData.old
      }, null, req);
      return this.validateSetUp(authData);
    }
    throw 'Invalid MFA data';
  }
  afterFind(authData, options, req) {
    if (req.master) {
      return;
    }
    if (this.totp && authData.secret) {
      return {
        status: 'enabled'
      };
    }
    if (this.sms && authData.mobile) {
      return {
        status: 'enabled'
      };
    }
    return {
      status: 'disabled'
    };
  }
  policy(req, auth) {
    if (this.sms && auth !== null && auth !== void 0 && auth.pending && Object.keys(auth).length === 1) {
      return 'default';
    }
    return 'additional';
  }
  async setupMobileOTP(mobile) {
    const {
      token,
      expiry
    } = await this.sendSMS(mobile);
    return {
      save: {
        pending: {
          [mobile]: {
            token,
            expiry
          }
        }
      }
    };
  }
  async sendSMS(mobile) {
    if (!/^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g.test(mobile)) {
      throw 'Invalid mobile number.';
    }
    let token = '';
    while (token.length < this.digits) {
      token += (0, _cryptoUtils.randomString)(10).replace(/\D/g, '');
    }
    token = token.substring(0, this.digits);
    await Promise.resolve(this.smsCallback(token, mobile));
    const expiry = new Date(new Date().getTime() + this.period * 1000);
    return {
      token,
      expiry
    };
  }
  async confirmSMSOTP(inputData, authData) {
    var _authData$pending;
    const {
      mobile,
      token
    } = inputData;
    if (!((_authData$pending = authData.pending) !== null && _authData$pending !== void 0 && _authData$pending[mobile])) {
      throw 'This number is not pending';
    }
    const pendingData = authData.pending[mobile];
    if (token !== pendingData.token) {
      throw 'Invalid MFA token';
    }
    if (new Date() > pendingData.expiry) {
      throw 'Invalid MFA token';
    }
    delete authData.pending[mobile];
    authData.mobile = mobile;
    return {
      save: authData
    };
  }
  setupTOTP(mfaData) {
    const {
      secret,
      token
    } = mfaData;
    if (!secret || !token || secret.length < 20) {
      throw 'Invalid MFA data';
    }
    const totp = new _otpauth.TOTP({
      algorithm: this.algorithm,
      digits: this.digits,
      period: this.period,
      secret: _otpauth.Secret.fromBase32(secret)
    });
    const valid = totp.validate({
      token
    });
    if (valid === null) {
      throw 'Invalid MFA token';
    }
    const recovery = [(0, _cryptoUtils.randomString)(30), (0, _cryptoUtils.randomString)(30)];
    return {
      response: {
        recovery: recovery.join(', ')
      },
      save: {
        secret,
        recovery
      }
    };
  }
}
var _default = exports.default = new MFAAdapter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfb3RwYXV0aCIsInJlcXVpcmUiLCJfY3J5cHRvVXRpbHMiLCJfQXV0aEFkYXB0ZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiTUZBQWRhcHRlciIsIkF1dGhBZGFwdGVyIiwidmFsaWRhdGVPcHRpb25zIiwib3B0cyIsInZhbGlkT3B0aW9ucyIsIm9wdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJzbXMiLCJpbmNsdWRlcyIsInRvdHAiLCJkaWdpdHMiLCJwZXJpb2QiLCJzZW5kU01TIiwic21zQ2FsbGJhY2siLCJhbGdvcml0aG0iLCJ2YWxpZGF0ZVNldFVwIiwibWZhRGF0YSIsIm1vYmlsZSIsInNldHVwTW9iaWxlT1RQIiwic2V0dXBUT1RQIiwidmFsaWRhdGVMb2dpbiIsImxvZ2luRGF0YSIsIl8iLCJyZXEiLCJzYXZlUmVzcG9uc2UiLCJkb05vdFNhdmUiLCJ0b2tlbiIsImF1dGgiLCJvcmlnaW5hbCIsImdldCIsInNlY3JldCIsInJlY292ZXJ5Iiwic2F2ZWQiLCJleHBpcnkiLCJtZmEiLCJzZW5kVG9rZW4iLCJvYmplY3QiLCJzZXQiLCJzYXZlIiwidXNlTWFzdGVyS2V5IiwiRGF0ZSIsIlRPVFAiLCJTZWNyZXQiLCJmcm9tQmFzZTMyIiwidmFsaWQiLCJ2YWxpZGF0ZSIsInZhbGlkYXRlVXBkYXRlIiwiYXV0aERhdGEiLCJtYXN0ZXIiLCJfcmVxJG9yaWdpbmFsJGdldCIsImNvbmZpcm1TTVNPVFAiLCJvbGQiLCJhZnRlckZpbmQiLCJzdGF0dXMiLCJwb2xpY3kiLCJwZW5kaW5nIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInRlc3QiLCJyYW5kb21TdHJpbmciLCJyZXBsYWNlIiwic3Vic3RyaW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRUaW1lIiwiaW5wdXREYXRhIiwiX2F1dGhEYXRhJHBlbmRpbmciLCJwZW5kaW5nRGF0YSIsInJlc3BvbnNlIiwiam9pbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL21mYS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBhcnNlIFNlcnZlciBhdXRoZW50aWNhdGlvbiBhZGFwdGVyIGZvciBNdWx0aS1GYWN0b3IgQXV0aGVudGljYXRpb24gKE1GQSkuXG4gKlxuICogQGNsYXNzIE1GQUFkYXB0ZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIGFkYXB0ZXIgb3B0aW9ucy5cbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gb3B0aW9ucy5vcHRpb25zIC0gU3VwcG9ydGVkIE1GQSBtZXRob2RzLiBNdXN0IGluY2x1ZGUgYFwiU01TXCJgIG9yIGBcIlRPVFBcImAuXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGlnaXRzPTZdIC0gVGhlIG51bWJlciBvZiBkaWdpdHMgZm9yIHRoZSBvbmUtdGltZSBwYXNzd29yZCAoT1RQKS4gTXVzdCBiZSBiZXR3ZWVuIDQgYW5kIDEwLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnBlcmlvZD0zMF0gLSBUaGUgdmFsaWRpdHkgcGVyaW9kIG9mIHRoZSBPVFAgaW4gc2Vjb25kcy4gTXVzdCBiZSBncmVhdGVyIHRoYW4gMTAuXG4gKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYWxnb3JpdGhtPVwiU0hBMVwiXSAtIFRoZSBhbGdvcml0aG0gdXNlZCBmb3IgVE9UUCBnZW5lcmF0aW9uLiBEZWZhdWx0cyB0byBgXCJTSEExXCJgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuc2VuZFNNU10gLSBBIGNhbGxiYWNrIGZ1bmN0aW9uIGZvciBzZW5kaW5nIFNNUyBPVFBzLiBSZXF1aXJlZCBpZiBgXCJTTVNcImAgaXMgaW5jbHVkZWQgaW4gYG9wdGlvbnNgLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogIyMgUGFyc2UgU2VydmVyIENvbmZpZ3VyYXRpb25cbiAqIFRvIGNvbmZpZ3VyZSBQYXJzZSBTZXJ2ZXIgZm9yIE1GQSwgdXNlIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICogYGBgamF2YXNjcmlwdFxuICoge1xuICogICBhdXRoOiB7XG4gKiAgICAgbWZhOiB7XG4gKiAgICAgICBvcHRpb25zOiBbXCJTTVNcIiwgXCJUT1RQXCJdLFxuICogICAgICAgZGlnaXRzOiA2LFxuICogICAgICAgcGVyaW9kOiAzMCxcbiAqICAgICAgIGFsZ29yaXRobTogXCJTSEExXCIsXG4gKiAgICAgICBzZW5kU01TOiAodG9rZW4sIG1vYmlsZSkgPT4ge1xuICogICAgICAgICAvLyBTZW5kIHRoZSBTTVMgdXNpbmcgeW91ciBwcmVmZXJyZWQgU01TIHByb3ZpZGVyLlxuICogICAgICAgICBjb25zb2xlLmxvZyhgU2VuZGluZyBTTVMgdG8gJHttb2JpbGV9IHdpdGggdG9rZW46ICR7dG9rZW59YCk7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiAjIyBNRkEgTWV0aG9kc1xuICogLSAqKlNNUyoqOlxuICogICAtIFJlcXVpcmVzIGEgdmFsaWQgbW9iaWxlIG51bWJlci5cbiAqICAgLSBTZW5kcyBhIG9uZS10aW1lIHBhc3N3b3JkIChPVFApIHZpYSBTTVMgZm9yIGxvZ2luIG9yIHZlcmlmaWNhdGlvbi5cbiAqICAgLSBVc2VzIHRoZSBgc2VuZFNNU2AgY2FsbGJhY2sgZm9yIHNlbmRpbmcgdGhlIE9UUC5cbiAqXG4gKiAtICoqVE9UUCoqOlxuICogICAtIFJlcXVpcmVzIGEgc2VjcmV0IGtleSBmb3Igc2V0dXAuXG4gKiAgIC0gVmFsaWRhdGVzIHRoZSB1c2VyJ3MgT1RQIGFnYWluc3QgYSB0aW1lLWJhc2VkIG9uZS10aW1lIHBhc3N3b3JkIChUT1RQKSBnZW5lcmF0ZWQgdXNpbmcgdGhlIHNlY3JldCBrZXkuXG4gKiAgIC0gU3VwcG9ydHMgY29uZmlndXJhYmxlIGRpZ2l0cywgcGVyaW9kLCBhbmQgYWxnb3JpdGhtIGZvciBUT1RQIGdlbmVyYXRpb24uXG4gKlxuICogIyMgTUZBIFBheWxvYWRcbiAqIFRoZSBhZGFwdGVyIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgYGF1dGhEYXRhYCBmaWVsZHM6XG4gKiAtICoqRm9yIFNNUy1iYXNlZCBNRkEqKjpcbiAqICAgLSBgbW9iaWxlYDogVGhlIHVzZXIncyBtb2JpbGUgbnVtYmVyIChyZXF1aXJlZCBmb3Igc2V0dXApLlxuICogICAtIGB0b2tlbmA6IFRoZSBPVFAgcHJvdmlkZWQgYnkgdGhlIHVzZXIgZm9yIGxvZ2luIG9yIHZlcmlmaWNhdGlvbi5cbiAqIC0gKipGb3IgVE9UUC1iYXNlZCBNRkEqKjpcbiAqICAgLSBgc2VjcmV0YDogVGhlIFRPVFAgc2VjcmV0IGtleSBmb3IgdGhlIHVzZXIgKHJlcXVpcmVkIGZvciBzZXR1cCkuXG4gKiAgIC0gYHRva2VuYDogVGhlIE9UUCBwcm92aWRlZCBieSB0aGUgdXNlciBmb3IgbG9naW4gb3IgdmVyaWZpY2F0aW9uLlxuICpcbiAqICMjIEV4YW1wbGUgUGF5bG9hZHNcbiAqICMjIyBTTVMgU2V0dXAgUGF5bG9hZFxuICogYGBganNvblxuICoge1xuICogICBcIm1vYmlsZVwiOiBcIisxMjM0NTY3ODkwXCJcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIyBUT1RQIFNldHVwIFBheWxvYWRcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgXCJzZWNyZXRcIjogXCJCQVNFMzJFTkNPREVEU0VDUkVUXCIsXG4gKiAgIFwidG9rZW5cIjogXCIxMjM0NTZcIlxuICogfVxuICogYGBgXG4gKlxuICogIyMjIExvZ2luIFBheWxvYWRcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgXCJ0b2tlblwiOiBcIjEyMzQ1NlwiXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9UaW1lLWJhc2VkX09uZS1UaW1lX1Bhc3N3b3JkX2FsZ29yaXRobSBUaW1lLWJhc2VkIE9uZS1UaW1lIFBhc3N3b3JkIEFsZ29yaXRobSAoVE9UUCl9XG4gKiBAc2VlIHtAbGluayBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjIzOCBSRkMgNjIzODogVE9UUDogVGltZS1CYXNlZCBPbmUtVGltZSBQYXNzd29yZCBBbGdvcml0aG19XG4gKi9cblxuaW1wb3J0IHsgVE9UUCwgU2VjcmV0IH0gZnJvbSAnb3RwYXV0aCc7XG5pbXBvcnQgeyByYW5kb21TdHJpbmcgfSBmcm9tICcuLi8uLi9jcnlwdG9VdGlscyc7XG5pbXBvcnQgQXV0aEFkYXB0ZXIgZnJvbSAnLi9BdXRoQWRhcHRlcic7XG5jbGFzcyBNRkFBZGFwdGVyIGV4dGVuZHMgQXV0aEFkYXB0ZXIge1xuICB2YWxpZGF0ZU9wdGlvbnMob3B0cykge1xuICAgIGNvbnN0IHZhbGlkT3B0aW9ucyA9IG9wdHMub3B0aW9ucztcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsaWRPcHRpb25zKSkge1xuICAgICAgdGhyb3cgJ21mYS5vcHRpb25zIG11c3QgYmUgYW4gYXJyYXknO1xuICAgIH1cbiAgICB0aGlzLnNtcyA9IHZhbGlkT3B0aW9ucy5pbmNsdWRlcygnU01TJyk7XG4gICAgdGhpcy50b3RwID0gdmFsaWRPcHRpb25zLmluY2x1ZGVzKCdUT1RQJyk7XG4gICAgaWYgKCF0aGlzLnNtcyAmJiAhdGhpcy50b3RwKSB7XG4gICAgICB0aHJvdyAnbWZhLm9wdGlvbnMgbXVzdCBpbmNsdWRlIFNNUyBvciBUT1RQJztcbiAgICB9XG4gICAgY29uc3QgZGlnaXRzID0gb3B0cy5kaWdpdHMgfHwgNjtcbiAgICBjb25zdCBwZXJpb2QgPSBvcHRzLnBlcmlvZCB8fCAzMDtcbiAgICBpZiAodHlwZW9mIGRpZ2l0cyAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93ICdtZmEuZGlnaXRzIG11c3QgYmUgYSBudW1iZXInO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBlcmlvZCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93ICdtZmEucGVyaW9kIG11c3QgYmUgYSBudW1iZXInO1xuICAgIH1cbiAgICBpZiAoZGlnaXRzIDwgNCB8fCBkaWdpdHMgPiAxMCkge1xuICAgICAgdGhyb3cgJ21mYS5kaWdpdHMgbXVzdCBiZSBiZXR3ZWVuIDQgYW5kIDEwJztcbiAgICB9XG4gICAgaWYgKHBlcmlvZCA8IDEwKSB7XG4gICAgICB0aHJvdyAnbWZhLnBlcmlvZCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAxMCc7XG4gICAgfVxuICAgIGNvbnN0IHNlbmRTTVMgPSBvcHRzLnNlbmRTTVM7XG4gICAgaWYgKHRoaXMuc21zICYmIHR5cGVvZiBzZW5kU01TICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyAnbWZhLnNlbmRTTVMgY2FsbGJhY2sgbXVzdCBiZSBkZWZpbmVkIHdoZW4gdXNpbmcgU01TIE9UUHMnO1xuICAgIH1cbiAgICB0aGlzLnNtc0NhbGxiYWNrID0gc2VuZFNNUztcbiAgICB0aGlzLmRpZ2l0cyA9IGRpZ2l0cztcbiAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZDtcbiAgICB0aGlzLmFsZ29yaXRobSA9IG9wdHMuYWxnb3JpdGhtIHx8ICdTSEExJztcbiAgfVxuICB2YWxpZGF0ZVNldFVwKG1mYURhdGEpIHtcbiAgICBpZiAobWZhRGF0YS5tb2JpbGUgJiYgdGhpcy5zbXMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldHVwTW9iaWxlT1RQKG1mYURhdGEubW9iaWxlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudG90cCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0dXBUT1RQKG1mYURhdGEpO1xuICAgIH1cbiAgICB0aHJvdyAnSW52YWxpZCBNRkEgZGF0YSc7XG4gIH1cbiAgYXN5bmMgdmFsaWRhdGVMb2dpbihsb2dpbkRhdGEsIF8sIHJlcSkge1xuICAgIGNvbnN0IHNhdmVSZXNwb25zZSA9IHtcbiAgICAgIGRvTm90U2F2ZTogdHJ1ZSxcbiAgICB9O1xuICAgIGNvbnN0IHRva2VuID0gbG9naW5EYXRhLnRva2VuO1xuICAgIGNvbnN0IGF1dGggPSByZXEub3JpZ2luYWwuZ2V0KCdhdXRoRGF0YScpIHx8IHt9O1xuICAgIGNvbnN0IHsgc2VjcmV0LCByZWNvdmVyeSwgbW9iaWxlLCB0b2tlbjogc2F2ZWQsIGV4cGlyeSB9ID0gYXV0aC5tZmEgfHwge307XG4gICAgaWYgKHRoaXMuc21zICYmIG1vYmlsZSkge1xuICAgICAgaWYgKHRva2VuID09PSAncmVxdWVzdCcpIHtcbiAgICAgICAgY29uc3QgeyB0b2tlbjogc2VuZFRva2VuLCBleHBpcnkgfSA9IGF3YWl0IHRoaXMuc2VuZFNNUyhtb2JpbGUpO1xuICAgICAgICBhdXRoLm1mYS50b2tlbiA9IHNlbmRUb2tlbjtcbiAgICAgICAgYXV0aC5tZmEuZXhwaXJ5ID0gZXhwaXJ5O1xuICAgICAgICByZXEub2JqZWN0LnNldCgnYXV0aERhdGEnLCBhdXRoKTtcbiAgICAgICAgYXdhaXQgcmVxLm9iamVjdC5zYXZlKG51bGwsIHsgdXNlTWFzdGVyS2V5OiB0cnVlIH0pO1xuICAgICAgICB0aHJvdyAnUGxlYXNlIGVudGVyIHRoZSB0b2tlbic7XG4gICAgICB9XG4gICAgICBpZiAoIXNhdmVkIHx8IHRva2VuICE9PSBzYXZlZCkge1xuICAgICAgICB0aHJvdyAnSW52YWxpZCBNRkEgdG9rZW4gMSc7XG4gICAgICB9XG4gICAgICBpZiAobmV3IERhdGUoKSA+IGV4cGlyeSkge1xuICAgICAgICB0aHJvdyAnSW52YWxpZCBNRkEgdG9rZW4gMic7XG4gICAgICB9XG4gICAgICBkZWxldGUgYXV0aC5tZmEudG9rZW47XG4gICAgICBkZWxldGUgYXV0aC5tZmEuZXhwaXJ5O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2F2ZTogYXV0aC5tZmEsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy50b3RwKSB7XG4gICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyAnSW52YWxpZCBNRkEgdG9rZW4nO1xuICAgICAgfVxuICAgICAgaWYgKCFzZWNyZXQpIHtcbiAgICAgICAgcmV0dXJuIHNhdmVSZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZWNvdmVyeVswXSA9PT0gdG9rZW4gfHwgcmVjb3ZlcnlbMV0gPT09IHRva2VuKSB7XG4gICAgICAgIHJldHVybiBzYXZlUmVzcG9uc2U7XG4gICAgICB9XG4gICAgICBjb25zdCB0b3RwID0gbmV3IFRPVFAoe1xuICAgICAgICBhbGdvcml0aG06IHRoaXMuYWxnb3JpdGhtLFxuICAgICAgICBkaWdpdHM6IHRoaXMuZGlnaXRzLFxuICAgICAgICBwZXJpb2Q6IHRoaXMucGVyaW9kLFxuICAgICAgICBzZWNyZXQ6IFNlY3JldC5mcm9tQmFzZTMyKHNlY3JldCksXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHZhbGlkID0gdG90cC52YWxpZGF0ZSh7XG4gICAgICAgIHRva2VuLFxuICAgICAgfSk7XG4gICAgICBpZiAodmFsaWQgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgJ0ludmFsaWQgTUZBIHRva2VuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNhdmVSZXNwb25zZTtcbiAgfVxuICBhc3luYyB2YWxpZGF0ZVVwZGF0ZShhdXRoRGF0YSwgXywgcmVxKSB7XG4gICAgaWYgKHJlcS5tYXN0ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGF1dGhEYXRhLm1vYmlsZSAmJiB0aGlzLnNtcykge1xuICAgICAgaWYgKCFhdXRoRGF0YS50b2tlbikge1xuICAgICAgICB0aHJvdyAnTUZBIGlzIGFscmVhZHkgc2V0IHVwIG9uIHRoaXMgYWNjb3VudCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jb25maXJtU01TT1RQKGF1dGhEYXRhLCByZXEub3JpZ2luYWwuZ2V0KCdhdXRoRGF0YScpPy5tZmEgfHwge30pO1xuICAgIH1cbiAgICBpZiAodGhpcy50b3RwKSB7XG4gICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlTG9naW4oeyB0b2tlbjogYXV0aERhdGEub2xkIH0sIG51bGwsIHJlcSk7XG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNldFVwKGF1dGhEYXRhKTtcbiAgICB9XG4gICAgdGhyb3cgJ0ludmFsaWQgTUZBIGRhdGEnO1xuICB9XG4gIGFmdGVyRmluZChhdXRoRGF0YSwgb3B0aW9ucywgcmVxKSB7XG4gICAgaWYgKHJlcS5tYXN0ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudG90cCAmJiBhdXRoRGF0YS5zZWNyZXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogJ2VuYWJsZWQnLFxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc21zICYmIGF1dGhEYXRhLm1vYmlsZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAnZW5hYmxlZCcsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiAnZGlzYWJsZWQnLFxuICAgIH07XG4gIH1cblxuICBwb2xpY3kocmVxLCBhdXRoKSB7XG4gICAgaWYgKHRoaXMuc21zICYmIGF1dGg/LnBlbmRpbmcgJiYgT2JqZWN0LmtleXMoYXV0aCkubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gJ2RlZmF1bHQnO1xuICAgIH1cbiAgICByZXR1cm4gJ2FkZGl0aW9uYWwnO1xuICB9XG5cbiAgYXN5bmMgc2V0dXBNb2JpbGVPVFAobW9iaWxlKSB7XG4gICAgY29uc3QgeyB0b2tlbiwgZXhwaXJ5IH0gPSBhd2FpdCB0aGlzLnNlbmRTTVMobW9iaWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc2F2ZToge1xuICAgICAgICBwZW5kaW5nOiB7XG4gICAgICAgICAgW21vYmlsZV06IHtcbiAgICAgICAgICAgIHRva2VuLFxuICAgICAgICAgICAgZXhwaXJ5LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBhc3luYyBzZW5kU01TKG1vYmlsZSkge1xuICAgIGlmICghL15bK10qWyhdezAsMX1bMC05XXsxLDN9WyldezAsMX1bLVxcc1xcLi8wLTldKiQvZy50ZXN0KG1vYmlsZSkpIHtcbiAgICAgIHRocm93ICdJbnZhbGlkIG1vYmlsZSBudW1iZXIuJztcbiAgICB9XG4gICAgbGV0IHRva2VuID0gJyc7XG4gICAgd2hpbGUgKHRva2VuLmxlbmd0aCA8IHRoaXMuZGlnaXRzKSB7XG4gICAgICB0b2tlbiArPSByYW5kb21TdHJpbmcoMTApLnJlcGxhY2UoL1xcRC9nLCAnJyk7XG4gICAgfVxuICAgIHRva2VuID0gdG9rZW4uc3Vic3RyaW5nKDAsIHRoaXMuZGlnaXRzKTtcbiAgICBhd2FpdCBQcm9taXNlLnJlc29sdmUodGhpcy5zbXNDYWxsYmFjayh0b2tlbiwgbW9iaWxlKSk7XG4gICAgY29uc3QgZXhwaXJ5ID0gbmV3IERhdGUobmV3IERhdGUoKS5nZXRUaW1lKCkgKyB0aGlzLnBlcmlvZCAqIDEwMDApO1xuICAgIHJldHVybiB7IHRva2VuLCBleHBpcnkgfTtcbiAgfVxuXG4gIGFzeW5jIGNvbmZpcm1TTVNPVFAoaW5wdXREYXRhLCBhdXRoRGF0YSkge1xuICAgIGNvbnN0IHsgbW9iaWxlLCB0b2tlbiB9ID0gaW5wdXREYXRhO1xuICAgIGlmICghYXV0aERhdGEucGVuZGluZz8uW21vYmlsZV0pIHtcbiAgICAgIHRocm93ICdUaGlzIG51bWJlciBpcyBub3QgcGVuZGluZyc7XG4gICAgfVxuICAgIGNvbnN0IHBlbmRpbmdEYXRhID0gYXV0aERhdGEucGVuZGluZ1ttb2JpbGVdO1xuICAgIGlmICh0b2tlbiAhPT0gcGVuZGluZ0RhdGEudG9rZW4pIHtcbiAgICAgIHRocm93ICdJbnZhbGlkIE1GQSB0b2tlbic7XG4gICAgfVxuICAgIGlmIChuZXcgRGF0ZSgpID4gcGVuZGluZ0RhdGEuZXhwaXJ5KSB7XG4gICAgICB0aHJvdyAnSW52YWxpZCBNRkEgdG9rZW4nO1xuICAgIH1cbiAgICBkZWxldGUgYXV0aERhdGEucGVuZGluZ1ttb2JpbGVdO1xuICAgIGF1dGhEYXRhLm1vYmlsZSA9IG1vYmlsZTtcbiAgICByZXR1cm4ge1xuICAgICAgc2F2ZTogYXV0aERhdGEsXG4gICAgfTtcbiAgfVxuXG4gIHNldHVwVE9UUChtZmFEYXRhKSB7XG4gICAgY29uc3QgeyBzZWNyZXQsIHRva2VuIH0gPSBtZmFEYXRhO1xuICAgIGlmICghc2VjcmV0IHx8ICF0b2tlbiB8fCBzZWNyZXQubGVuZ3RoIDwgMjApIHtcbiAgICAgIHRocm93ICdJbnZhbGlkIE1GQSBkYXRhJztcbiAgICB9XG4gICAgY29uc3QgdG90cCA9IG5ldyBUT1RQKHtcbiAgICAgIGFsZ29yaXRobTogdGhpcy5hbGdvcml0aG0sXG4gICAgICBkaWdpdHM6IHRoaXMuZGlnaXRzLFxuICAgICAgcGVyaW9kOiB0aGlzLnBlcmlvZCxcbiAgICAgIHNlY3JldDogU2VjcmV0LmZyb21CYXNlMzIoc2VjcmV0KSxcbiAgICB9KTtcbiAgICBjb25zdCB2YWxpZCA9IHRvdHAudmFsaWRhdGUoe1xuICAgICAgdG9rZW4sXG4gICAgfSk7XG4gICAgaWYgKHZhbGlkID09PSBudWxsKSB7XG4gICAgICB0aHJvdyAnSW52YWxpZCBNRkEgdG9rZW4nO1xuICAgIH1cbiAgICBjb25zdCByZWNvdmVyeSA9IFtyYW5kb21TdHJpbmcoMzApLCByYW5kb21TdHJpbmcoMzApXTtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzcG9uc2U6IHsgcmVjb3Zlcnk6IHJlY292ZXJ5LmpvaW4oJywgJykgfSxcbiAgICAgIHNhdmU6IHsgc2VjcmV0LCByZWNvdmVyeSB9LFxuICAgIH07XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBNRkFBZGFwdGVyKCk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQThFQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxZQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFBd0MsU0FBQUcsdUJBQUFDLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFoRnhDO0FB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