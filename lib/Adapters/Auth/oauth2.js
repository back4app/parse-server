"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _AuthAdapter = _interopRequireDefault(require("./AuthAdapter"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Parse Server authentication adapter for OAuth2 Token Introspection.
 *
 * @class OAuth2Adapter
 * @param {Object} options - The adapter configuration options.
 * @param {string} options.tokenIntrospectionEndpointUrl - The URL of the token introspection endpoint. Required.
 * @param {boolean} options.oauth2 - Indicates that the request should be handled by the OAuth2 adapter. Required.
 * @param {string} [options.useridField] - The field in the introspection response that contains the user ID. Optional.
 * @param {string} [options.appidField] - The field in the introspection response that contains the app ID. Optional.
 * @param {string[]} [options.appIds] - List of allowed app IDs. Required if `appidField` is defined.
 * @param {string} [options.authorizationHeader] - The Authorization header value for the introspection request. Optional.
 *
 * @description
 * ## Parse Server Configuration
 * To configure Parse Server for OAuth2 Token Introspection, use the following structure:
 * ```json
 * {
 *   "auth": {
 *     "oauth2Provider": {
 *       "tokenIntrospectionEndpointUrl": "https://provider.com/introspect",
 *       "useridField": "sub",
 *       "appidField": "aud",
 *       "appIds": ["my-app-id"],
 *       "authorizationHeader": "Basic dXNlcm5hbWU6cGFzc3dvcmQ=",
 *       "oauth2": true
 *     }
 *   }
 * }
 * ```
 *
 * The adapter requires the following `authData` fields:
 * - `id`: The user ID provided by the client.
 * - `access_token`: The access token provided by the client.
 *
 * ## Auth Payload
 * ### Example Auth Payload
 * ```json
 * {
 *   "oauth2": {
 *     "id": "user-id",
 *     "access_token": "access-token"
 *   }
 * }
 * ```
 *
 * ## Notes
 * - `tokenIntrospectionEndpointUrl` is mandatory and should point to a valid OAuth2 provider's introspection endpoint.
 * - If `appidField` is defined, `appIds` must also be specified to validate the app ID in the introspection response.
 * - `authorizationHeader` can be used to authenticate requests to the token introspection endpoint.
 *
 * @see {@link https://datatracker.ietf.org/doc/html/rfc7662 OAuth 2.0 Token Introspection Specification}
 */
class OAuth2Adapter extends _AuthAdapter.default {
  validateOptions(options) {
    var _options$appIds;
    super.validateOptions(options);
    if (!options.tokenIntrospectionEndpointUrl) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'OAuth2 token introspection endpoint URL is missing.');
    }
    if (options.appidField && !((_options$appIds = options.appIds) !== null && _options$appIds !== void 0 && _options$appIds.length)) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'OAuth2 configuration is missing app IDs.');
    }
    this.tokenIntrospectionEndpointUrl = options.tokenIntrospectionEndpointUrl;
    this.useridField = options.useridField;
    this.appidField = options.appidField;
    this.appIds = options.appIds;
    this.authorizationHeader = options.authorizationHeader;
  }
  async validateAppId(authData) {
    if (!this.appidField) {
      return;
    }
    const response = await this.requestTokenInfo(authData.access_token);
    const appIdFieldValue = response[this.appidField];
    const isValidAppId = Array.isArray(appIdFieldValue) ? appIdFieldValue.some(appId => this.appIds.includes(appId)) : this.appIds.includes(appIdFieldValue);
    if (!isValidAppId) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'OAuth2: Invalid app ID.');
    }
  }
  async validateAuthData(authData) {
    const response = await this.requestTokenInfo(authData.access_token);
    if (!response.active || this.useridField && authData.id !== response[this.useridField]) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'OAuth2 access token is invalid for this user.');
    }
    return {};
  }
  async requestTokenInfo(accessToken) {
    const response = await fetch(this.tokenIntrospectionEndpointUrl, {
      method: 'POST',
      headers: _objectSpread({
        'Content-Type': 'application/x-www-form-urlencoded'
      }, this.authorizationHeader && {
        Authorization: this.authorizationHeader
      }),
      body: new URLSearchParams({
        token: accessToken
      })
    });
    if (!response.ok) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'OAuth2 token introspection request failed.');
    }
    return response.json();
  }
}
var _default = exports.default = new OAuth2Adapter();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,