'use strict';

// Helper functions for accessing the vkontakte API.
var _Config = _interopRequireDefault(require("../../Config"));
var _Deprecator = _interopRequireDefault(require("../../Deprecator/Deprecator"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const httpsRequest = require('./httpsRequest');
var Parse = require('parse/node').Parse;
// Returns a promise that fulfills iff this user id is valid.
async function validateAuthData(authData, params) {
  var _vkUser$response;
  const config = _Config.default.get(Parse.applicationId);
  _Deprecator.default.logRuntimeDeprecation({
    usage: 'vkontakte adapter'
  });
  const vkConfig = config.auth.vkontakte;
  if (!(vkConfig !== null && vkConfig !== void 0 && vkConfig.enableInsecureAuth) || !config.enableInsecureAuthAdapters) {
    throw new Parse.Error('Vk only works with enableInsecureAuth: true');
  }
  const response = await vkOAuth2Request(params);
  if (!(response !== null && response !== void 0 && response.access_token)) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Vk appIds or appSecret is incorrect.');
  }
  const vkUser = await request('api.vk.com', `method/users.get?access_token=${authData.access_token}&v=${params.apiVersion}`);
  if (!(vkUser !== null && vkUser !== void 0 && (_vkUser$response = vkUser.response) !== null && _vkUser$response !== void 0 && _vkUser$response.length) || vkUser.response[0].id !== authData.id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Vk auth is invalid for this user.');
  }
}
function vkOAuth2Request(params) {
  return new Promise(function (resolve) {
    if (!params || !params.appIds || !params.appIds.length || !params.appSecret || !params.appSecret.length) {
      throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Vk auth is not configured. Missing appIds or appSecret.');
    }
    if (!params.apiVersion) {
      params.apiVersion = '5.124';
    }
    resolve();
  }).then(function () {
    return request('oauth.vk.com', 'access_token?client_id=' + params.appIds + '&client_secret=' + params.appSecret + '&v=' + params.apiVersion + '&grant_type=client_credentials');
  });
}

// Returns a promise that fulfills iff this app id is valid.
function validateAppId() {
  return Promise.resolve();
}

// A promisey wrapper for api requests
function request(host, path) {
  return httpsRequest.get('https://' + host + '/' + path);
}
module.exports = {
  validateAppId: validateAppId,
  validateAuthData: validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfRGVwcmVjYXRvciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImh0dHBzUmVxdWVzdCIsIlBhcnNlIiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwicGFyYW1zIiwiX3ZrVXNlciRyZXNwb25zZSIsImNvbmZpZyIsIkNvbmZpZyIsImdldCIsImFwcGxpY2F0aW9uSWQiLCJEZXByZWNhdG9yIiwibG9nUnVudGltZURlcHJlY2F0aW9uIiwidXNhZ2UiLCJ2a0NvbmZpZyIsImF1dGgiLCJ2a29udGFrdGUiLCJlbmFibGVJbnNlY3VyZUF1dGgiLCJlbmFibGVJbnNlY3VyZUF1dGhBZGFwdGVycyIsIkVycm9yIiwicmVzcG9uc2UiLCJ2a09BdXRoMlJlcXVlc3QiLCJhY2Nlc3NfdG9rZW4iLCJPQkpFQ1RfTk9UX0ZPVU5EIiwidmtVc2VyIiwicmVxdWVzdCIsImFwaVZlcnNpb24iLCJsZW5ndGgiLCJpZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiYXBwSWRzIiwiYXBwU2VjcmV0IiwidGhlbiIsInZhbGlkYXRlQXBwSWQiLCJob3N0IiwicGF0aCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvQWRhcHRlcnMvQXV0aC92a29udGFrdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvciBhY2Nlc3NpbmcgdGhlIHZrb250YWt0ZSBBUEkuXG5cbmNvbnN0IGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5pbXBvcnQgQ29uZmlnIGZyb20gJy4uLy4uL0NvbmZpZyc7XG5pbXBvcnQgRGVwcmVjYXRvciBmcm9tICcuLi8uLi9EZXByZWNhdG9yL0RlcHJlY2F0b3InO1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIHVzZXIgaWQgaXMgdmFsaWQuXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBwYXJhbXMpIHtcbiAgY29uc3QgY29uZmlnID0gQ29uZmlnLmdldChQYXJzZS5hcHBsaWNhdGlvbklkKTtcbiAgRGVwcmVjYXRvci5sb2dSdW50aW1lRGVwcmVjYXRpb24oeyB1c2FnZTogJ3Zrb250YWt0ZSBhZGFwdGVyJyB9KTtcblxuICBjb25zdCB2a0NvbmZpZyA9IGNvbmZpZy5hdXRoLnZrb250YWt0ZTtcbiAgaWYgKCF2a0NvbmZpZz8uZW5hYmxlSW5zZWN1cmVBdXRoIHx8ICFjb25maWcuZW5hYmxlSW5zZWN1cmVBdXRoQWRhcHRlcnMpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoJ1ZrIG9ubHkgd29ya3Mgd2l0aCBlbmFibGVJbnNlY3VyZUF1dGg6IHRydWUnKTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdmtPQXV0aDJSZXF1ZXN0KHBhcmFtcyk7XG4gIGlmICghcmVzcG9uc2U/LmFjY2Vzc190b2tlbikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnVmsgYXBwSWRzIG9yIGFwcFNlY3JldCBpcyBpbmNvcnJlY3QuJyk7XG4gIH1cblxuICBjb25zdCB2a1VzZXIgPSBhd2FpdCByZXF1ZXN0KFxuICAgICdhcGkudmsuY29tJyxcbiAgICBgbWV0aG9kL3VzZXJzLmdldD9hY2Nlc3NfdG9rZW49JHthdXRoRGF0YS5hY2Nlc3NfdG9rZW59JnY9JHtwYXJhbXMuYXBpVmVyc2lvbn1gXG4gICk7XG5cbiAgaWYgKCF2a1VzZXI/LnJlc3BvbnNlPy5sZW5ndGggfHwgdmtVc2VyLnJlc3BvbnNlWzBdLmlkICE9PSBhdXRoRGF0YS5pZCkge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELCAnVmsgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmtPQXV0aDJSZXF1ZXN0KHBhcmFtcykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICBpZiAoXG4gICAgICAhcGFyYW1zIHx8XG4gICAgICAhcGFyYW1zLmFwcElkcyB8fFxuICAgICAgIXBhcmFtcy5hcHBJZHMubGVuZ3RoIHx8XG4gICAgICAhcGFyYW1zLmFwcFNlY3JldCB8fFxuICAgICAgIXBhcmFtcy5hcHBTZWNyZXQubGVuZ3RoXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAgICdWayBhdXRoIGlzIG5vdCBjb25maWd1cmVkLiBNaXNzaW5nIGFwcElkcyBvciBhcHBTZWNyZXQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuYXBpVmVyc2lvbikge1xuICAgICAgcGFyYW1zLmFwaVZlcnNpb24gPSAnNS4xMjQnO1xuICAgIH1cbiAgICByZXNvbHZlKCk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiByZXF1ZXN0KFxuICAgICAgJ29hdXRoLnZrLmNvbScsXG4gICAgICAnYWNjZXNzX3Rva2VuP2NsaWVudF9pZD0nICtcbiAgICAgICAgcGFyYW1zLmFwcElkcyArXG4gICAgICAgICcmY2xpZW50X3NlY3JldD0nICtcbiAgICAgICAgcGFyYW1zLmFwcFNlY3JldCArXG4gICAgICAgICcmdj0nICtcbiAgICAgICAgcGFyYW1zLmFwaVZlcnNpb24gK1xuICAgICAgICAnJmdyYW50X3R5cGU9Y2xpZW50X2NyZWRlbnRpYWxzJ1xuICAgICk7XG4gIH0pO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmZiB0aGlzIGFwcCBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXBwSWQoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLy8gQSBwcm9taXNleSB3cmFwcGVyIGZvciBhcGkgcmVxdWVzdHNcbmZ1bmN0aW9uIHJlcXVlc3QoaG9zdCwgcGF0aCkge1xuICByZXR1cm4gaHR0cHNSZXF1ZXN0LmdldCgnaHR0cHM6Ly8nICsgaG9zdCArICcvJyArIHBhdGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGVBcHBJZDogdmFsaWRhdGVBcHBJZCxcbiAgdmFsaWRhdGVBdXRoRGF0YTogdmFsaWRhdGVBdXRoRGF0YSxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVo7QUFJQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBcUQsU0FBQUQsdUJBQUFHLENBQUEsV0FBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7QUFIckQsTUFBTUcsWUFBWSxHQUFHTCxPQUFPLENBQUMsZ0JBQWdCLENBQUM7QUFDOUMsSUFBSU0sS0FBSyxHQUFHTixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUNNLEtBQUs7QUFJdkM7QUFDQSxlQUFlQyxnQkFBZ0JBLENBQUNDLFFBQVEsRUFBRUMsTUFBTSxFQUFFO0VBQUEsSUFBQUMsZ0JBQUE7RUFDaEQsTUFBTUMsTUFBTSxHQUFHQyxlQUFNLENBQUNDLEdBQUcsQ0FBQ1AsS0FBSyxDQUFDUSxhQUFhLENBQUM7RUFDOUNDLG1CQUFVLENBQUNDLHFCQUFxQixDQUFDO0lBQUVDLEtBQUssRUFBRTtFQUFvQixDQUFDLENBQUM7RUFFaEUsTUFBTUMsUUFBUSxHQUFHUCxNQUFNLENBQUNRLElBQUksQ0FBQ0MsU0FBUztFQUN0QyxJQUFJLEVBQUNGLFFBQVEsYUFBUkEsUUFBUSxlQUFSQSxRQUFRLENBQUVHLGtCQUFrQixLQUFJLENBQUNWLE1B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