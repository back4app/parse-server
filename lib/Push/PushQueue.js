"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PushQueue = void 0;
var _ParseMessageQueue = require("../ParseMessageQueue");
var _rest = _interopRequireDefault(require("../rest"));
var _utils = require("./utils");
var _node = _interopRequireDefault(require("parse/node"));
var _logger = _interopRequireDefault(require("../logger"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const PUSH_CHANNEL = 'parse-server-push';
const DEFAULT_BATCH_SIZE = 100;
class PushQueue {
  // config object of the publisher, right now it only contains the redisURL,
  // but we may extend it later.
  constructor(config = {}) {
    this.channel = config.channel || PushQueue.defaultPushChannel();
    this.batchSize = config.batchSize || DEFAULT_BATCH_SIZE;
    this.parsePublisher = _ParseMessageQueue.ParseMessageQueue.createPublisher(config);
  }
  static defaultPushChannel() {
    return `${_node.default.applicationId}-${PUSH_CHANNEL}`;
  }
  enqueue(body, where, config, auth, pushStatus) {
    const limit = this.batchSize;
    where = (0, _utils.applyDeviceTokenExists)(where);

    // Order by objectId so no impact on the DB
    // const order = 'objectId';
    return Promise.resolve().then(() => {
      return _rest.default.find(config, auth, '_Installation', where, {
        limit: 0,
        count: true
      });
    }).then(({
      results,
      count
    }) => {
      if (!results || count == 0) {
        return pushStatus.complete();
      }
      const maxPages = Math.ceil(count / limit);
      pushStatus.setRunning(maxPages);
      // while (page < maxPages) {
      // changes request/limit/orderBy by id range intervals for better performance
      // https://docs.mongodb.com/manual/reference/method/cursor.skip/
      // Range queries can use indexes to avoid scanning unwanted documents,
      // typically yielding better performance as the offset grows compared
      // to using cursor.skip() for pagination.
      const query = {
        where
      };
      const pushWorkItem = {
        body,
        query,
        maxPages,
        pushStatus: {
          objectId: pushStatus.objectId
        },
        applicationId: config.applicationId
      };
      const publishResult = Promise.resolve(this.parsePublisher.publish(this.channel, JSON.stringify(pushWorkItem)));
      return publishResult.then(reponse => {
        const result = reponse && reponse.data || reponse;
        _logger.default.info(`All ${maxPages} packages were enqueued for PushStatus ${pushStatus.objectId}`, result);
        return result;
      });
    }).catch(err => {
      _logger.default.info(`Can't count installations for PushStatus ${pushStatus.objectId}: ${err.message}`);
      throw err;
    });
  }
}
exports.PushQueue = PushQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUGFyc2VNZXNzYWdlUXVldWUiLCJyZXF1aXJlIiwiX3Jlc3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3V0aWxzIiwiX25vZGUiLCJfbG9nZ2VyIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUFVTSF9DSEFOTkVMIiwiREVGQVVMVF9CQVRDSF9TSVpFIiwiUHVzaFF1ZXVlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJjaGFubmVsIiwiZGVmYXVsdFB1c2hDaGFubmVsIiwiYmF0Y2hTaXplIiwicGFyc2VQdWJsaXNoZXIiLCJQYXJzZU1lc3NhZ2VRdWV1ZSIsImNyZWF0ZVB1Ymxpc2hlciIsIlBhcnNlIiwiYXBwbGljYXRpb25JZCIsImVucXVldWUiLCJib2R5Iiwid2hlcmUiLCJhdXRoIiwicHVzaFN0YXR1cyIsImxpbWl0IiwiYXBwbHlEZXZpY2VUb2tlbkV4aXN0cyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJlc3QiLCJmaW5kIiwiY291bnQiLCJyZXN1bHRzIiwiY29tcGxldGUiLCJtYXhQYWdlcyIsIk1hdGgiLCJjZWlsIiwic2V0UnVubmluZyIsInF1ZXJ5IiwicHVzaFdvcmtJdGVtIiwib2JqZWN0SWQiLCJwdWJsaXNoUmVzdWx0IiwicHVibGlzaCIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXBvbnNlIiwicmVzdWx0IiwiZGF0YSIsImxvZyIsImluZm8iLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL1B1c2gvUHVzaFF1ZXVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhcnNlTWVzc2FnZVF1ZXVlIH0gZnJvbSAnLi4vUGFyc2VNZXNzYWdlUXVldWUnO1xuaW1wb3J0IHJlc3QgZnJvbSAnLi4vcmVzdCc7XG5pbXBvcnQgeyBhcHBseURldmljZVRva2VuRXhpc3RzIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgUGFyc2UgZnJvbSAncGFyc2Uvbm9kZSc7XG5pbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5cbmNvbnN0IFBVU0hfQ0hBTk5FTCA9ICdwYXJzZS1zZXJ2ZXItcHVzaCc7XG5jb25zdCBERUZBVUxUX0JBVENIX1NJWkUgPSAxMDA7XG5cbmV4cG9ydCBjbGFzcyBQdXNoUXVldWUge1xuICBwYXJzZVB1Ymxpc2hlcjogT2JqZWN0O1xuICBjaGFubmVsOiBTdHJpbmc7XG4gIGJhdGNoU2l6ZTogTnVtYmVyO1xuXG4gIC8vIGNvbmZpZyBvYmplY3Qgb2YgdGhlIHB1Ymxpc2hlciwgcmlnaHQgbm93IGl0IG9ubHkgY29udGFpbnMgdGhlIHJlZGlzVVJMLFxuICAvLyBidXQgd2UgbWF5IGV4dGVuZCBpdCBsYXRlci5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBhbnkgPSB7fSkge1xuICAgIHRoaXMuY2hhbm5lbCA9IGNvbmZpZy5jaGFubmVsIHx8IFB1c2hRdWV1ZS5kZWZhdWx0UHVzaENoYW5uZWwoKTtcbiAgICB0aGlzLmJhdGNoU2l6ZSA9IGNvbmZpZy5iYXRjaFNpemUgfHwgREVGQVVMVF9CQVRDSF9TSVpFO1xuICAgIHRoaXMucGFyc2VQdWJsaXNoZXIgPSBQYXJzZU1lc3NhZ2VRdWV1ZS5jcmVhdGVQdWJsaXNoZXIoY29uZmlnKTtcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHVzaENoYW5uZWwoKSB7XG4gICAgcmV0dXJuIGAke1BhcnNlLmFwcGxpY2F0aW9uSWR9LSR7UFVTSF9DSEFOTkVMfWA7XG4gIH1cblxuICBlbnF1ZXVlKGJvZHksIHdoZXJlLCBjb25maWcsIGF1dGgsIHB1c2hTdGF0dXMpIHtcbiAgICBjb25zdCBsaW1pdCA9IHRoaXMuYmF0Y2hTaXplO1xuXG4gICAgd2hlcmUgPSBhcHBseURldmljZVRva2VuRXhpc3RzKHdoZXJlKTtcblxuICAgIC8vIE9yZGVyIGJ5IG9iamVjdElkIHNvIG5vIGltcGFjdCBvbiB0aGUgREJcbiAgICAvLyBjb25zdCBvcmRlciA9ICdvYmplY3RJZCc7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHJldHVybiByZXN0LmZpbmQoY29uZmlnLCBhdXRoLCAnX0luc3RhbGxhdGlvbicsIHdoZXJlLCB7XG4gICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgY291bnQ6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCh7IHJlc3VsdHMsIGNvdW50IH0pID0+IHtcbiAgICAgICAgaWYgKCFyZXN1bHRzIHx8IGNvdW50ID09IDApIHtcbiAgICAgICAgICByZXR1cm4gcHVzaFN0YXR1cy5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1heFBhZ2VzID0gTWF0aC5jZWlsKGNvdW50IC8gbGltaXQpO1xuICAgICAgICBwdXNoU3RhdHVzLnNldFJ1bm5pbmcobWF4UGFnZXMpO1xuICAgICAgICAvLyB3aGlsZSAocGFnZSA8IG1heFBhZ2VzKSB7XG4gICAgICAgIC8vIGNoYW5nZXMgcmVxdWVzdC9saW1pdC9vcmRlckJ5IGJ5IGlkIHJhbmdlIGludGVydmFscyBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gICAgICAgIC8vIGh0dHBzOi8vZG9jcy5tb25nb2RiLmNvbS9tYW51YWwvcmVmZXJlbmNlL21ldGhvZC9jdXJzb3Iuc2tpcC9cbiAgICAgICAgLy8gUmFuZ2UgcXVlcmllcyBjYW4gdXNlIGluZGV4ZXMgdG8gYXZvaWQgc2Nhbm5pbmcgdW53YW50ZWQgZG9jdW1lbnRzLFxuICAgICAgICAvLyB0eXBpY2FsbHkgeWllbGRpbmcgYmV0dGVyIHBlcmZvcm1hbmNlIGFzIHRoZSBvZmZzZXQgZ3Jvd3MgY29tcGFyZWRcbiAgICAgICAgLy8gdG8gdXNpbmcgY3Vyc29yLnNraXAoKSBmb3IgcGFnaW5hdGlvbi5cbiAgICAgICAgY29uc3QgcXVlcnkgPSB7IHdoZXJlIH07XG5cbiAgICAgICAgY29uc3QgcHVzaFdvcmtJdGVtID0ge1xuICAgICAgICAgIGJvZHksXG4gICAgICAgICAgcXVlcnksXG4gICAgICAgICAgbWF4UGFnZXMsXG4gICAgICAgICAgcHVzaFN0YXR1czogeyBvYmplY3RJZDogcHVzaFN0YXR1cy5vYmplY3RJZCB9LFxuICAgICAgICAgIGFwcGxpY2F0aW9uSWQ6IGNvbmZpZy5hcHBsaWNhdGlvbklkLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdWJsaXNoUmVzdWx0ID0gUHJvbWlzZS5yZXNvbHZlKFxuICAgICAgICAgIHRoaXMucGFyc2VQdWJsaXNoZXIucHVibGlzaChcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbCxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHB1c2hXb3JrSXRlbSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBwdWJsaXNoUmVzdWx0LnRoZW4ocmVwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gKHJlcG9uc2UgJiYgcmVwb25zZS5kYXRhKSB8fCByZXBvbnNlO1xuICAgICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgICAgYEFsbCAke21heFBhZ2VzfSBwYWNrYWdlcyB3ZXJlIGVucXVldWVkIGZvciBQdXNoU3RhdHVzICR7XG4gICAgICAgICAgICAgIHB1c2hTdGF0dXMub2JqZWN0SWRcbiAgICAgICAgICAgIH1gLFxuICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgbG9nLmluZm8oXG4gICAgICAgICAgYENhbid0IGNvdW50IGluc3RhbGxhdGlvbnMgZm9yIFB1c2hTdGF0dXMgJHtwdXNoU3RhdHVzLm9iamVjdElkfTogJHtcbiAgICAgICAgICAgIGVyci5tZXNzYWdlXG4gICAgICAgICAgfWBcbiAgICAgICAgKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEs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